type: layout-form
id: root
header:
  - type: header
    title: ESP Installer
    logo: espressif.svg
form:
  - type: fieldset
    id: main_fieldset
    platform: win32
    subitems:
      - type: row
        id: row_1
        subitems:
          - type: combo
            id: sdk_type
            name: Select SDK
            items:
              - ESP-IDF
              - Rust
              - Zephyr
              - TinyGo
              - Embedded Swift
              - MicroPython
              - NuttX
              - DeviceScript
              - .NET nanoFramework
  - type: fieldset
    id: main_fieldset
    platform:
      - linux
      - darwin
    subitems:
      - type: row
        id: row_1
        subitems:
          - type: combo
            id: sdk_type
            name: Select SDK
            items:
              - ESP-IDF
              - Zephyr
              - TinyGo
              - Rust
  #
  # ESP IDF
  #
  - type: fieldset
    id: fieldset_esp_idf
    platform: win32
    subitems:
      - type: row
        id: row_custom_esp_idf
        subitems:
          - type: combo
            id: esp_idf_version
            name: Select ESP-IDF Version
            items:
              - v5.3-beta1
              - v5.2.2
              - v5.1.4
              - v5.2.1
            variable: version
      - type: 'action-row'
        platform: win32
        id: idf-install-scoop
        name: Install Scoop
        banner: |
            Installing Scoop as it will be used to install
            more prerequisites for ESP-IDF that will be
            installed in following steps.
        verify: scoop --version
        install: iwr -useb get.scoop.sh | iex
      - type: 'action-row'
        id: idf-install-python
        name: Install Python
        verify: python --version
        install: scoop install python
      - type: 'action-row'
        id: idf-install-git
        name: Install Git
        verify: git --version
        install: scoop install git
      - type: 'action-row'
        id: idf-install-cmake
        name: Install CMake
        verify: cmake --version
        install: scoop install cmake
      - type: 'action-row'
        id: idf-install-ninja
        name: Install Ninja
        verify: ninja --version
        install: scoop install ninja
      - type: 'action-row'
        id: idf-install-openocd
        name: Install OpenOCD
        verify: openocd --version
        install: scoop install openocd
      - type: 'action-row'
        id: idf-install-sdk
        name: Install ESP-IDF
        variables:
          - version
        verify: if (Test-path ~/esp-idf-${version} -PathType container) { exit 0 } else { exit 1}
        install: |
            if (-not (Test-path ~/esp-idf-${version}.zip -PathType leaf)) { wget https://dl.espressif.com/github_assets/espressif/esp-idf/releases/download/${version}/esp-idf-${version}.zip -O ./esp-idf-${version}.zip }
            unzip esp-idf-${version}.zip
      - type: 'action-row'
        id: idf-install-tools
        name: Install ESP-IDF Tools
        variables:
          - version
        verify: if (Test-path ~/esp-idf-${version}-xx -PathType container) { exit 0 } else { exit 1}
        install: |
            cd ~/esp-idf-${version}
            ./install.bat
            ./export.bat
  - type: fieldset
    id: fieldset_esp_idf
    platform: linux
    subitems:
      - type: row
        id: row_custom_esp_idf
        subitems:
          - type: combo
            id: esp_idf_version
            name: Select ESP-IDF Version
            items:
              - v5.3-beta1
              - v5.2.2
              - v5.1.4
              - v5.2.1
            variable: version
      - type: 'action-row'
        platform: win32
        id: idf-install-scoop
        name: Install Scoop
        verify: scoop --version
        install: iwr -useb get.scoop.sh | iex

      - type: 'action-row'
        id: tinygo-install-python
        name: Install Python
        verify: python3.9 --version
        install: |
            echo "xxxpassxxx" | sudo -S apt update
            echo "xxxpassxxx" | sudo -S apt install -y software-properties-common
            echo "xxxpassxxx" | sudo -S add-apt-repository ppa:deadsnakes/ppa -y
            echo "xxxpassxxx" | sudo -S apt install -y python3.9 wget git cmake  ninja-build openocd

      - type: 'action-row'
        id: idf-install-sdk
        name: Install ESP-IDF
        variables:
          - version
        verify: test -d ~/esp-idf-${version}
        install: |
            cd ~
            git clone -b ${version} --recursive https://github.com/espressif/esp-idf.git esp-idf-${version}
      - type: 'action-row'
        id: idf-install-tools
        name: Install ESP-IDF Tools
        variables:
          - version
        verify: test -d ~/esp-idf-${version}-xxx
        install: |
            cd ~/esp-idf-${version}
            ./install.sh
            ./export.sh
  #
  # TinyGo
  #
  - type: fieldset
    id: fieldset_tinygo
    platform: win32
    subitems:
      - type: 'action-row'
        id: install-scoop
        name: Install Scoop
        verify: scoop --version
        install: iwr -useb get.scoop.sh | iex
      - type: 'action-row'
        id: install-go
        name: Install Go
        verify: go version
        install: scoop install go
        uninstall: scoop uninstall go
      - type: 'action-row'
        id: install-tinygo
        name: Install TinyGo
        verify: tinygo version
        install: scoop install tinygo
        uninstall: scoop uninstall tinygo
      - type: 'action-row'
        id: tinygo-install-python
        name: Install Python
        verify: python --version
        install: scoop install python
      - type: 'action-row'
        id: tinygo-install-esptool
        name: Install esptool.py
        verify: esptool -h
        install: pip install esptool

  - type: fieldset
    id: fieldset_tinygo
    platform: linux
    subitems:
      - type: 'action-row'
        id: tinygo-install-python
        name: Install Python
        verify: python3.9 --version
        install: |
            echo "xxxpassxxx" | sudo -S apt update
            echo "xxxpassxxx" | sudo -S apt install -y software-properties-common
            echo "xxxpassxxx" | sudo -S add-apt-repository ppa:deadsnakes/ppa -y
            echo "xxxpassxxx" | sudo -S apt install -y python3.9 wget

      - type: 'action-row'
        id: install-go-linux
        name: Install Go
        verify: go version
        install: |
          cd ~
          wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz
          echo "xxxpassxxx" | sudo -S rm -rf /usr/local/go
          echo "xxxpassxxx" | sudo -S tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin

      - type: 'action-row'
        id: install-tinygo
        name: Install TinyGo
        verify: tinygo version
        install: |
          cd ~
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.31.2/tinygo_0.31.2_amd64.deb
          echo "xxxpassxxx" | sudo -S dpkg -i tinygo_0.31.2_amd64.deb

  #
  # Rust
  #
  - type: fieldset
    id: fieldset_rust
    platform: win32
    subitems:
      - type: 'action-row'
        id: install-scoop-rust
        name: Install Scoop
        verify: scoop --version
        install: iwr -useb get.scoop.sh | iex
      - type: 'action-row'
        id: install-rustup
        name: Install Rust Up
        verify: rustup --version
        install: scoop install rustup-gnu
        uninstall: scoop uninstall rustup-gnu

      - type: 'action-row'
        id: install-espup
        name: Install espup (Xtensa targets only)
        verify: espup --version
        install: cargo install espup

      - type: 'action-row'
        id: rust-install-espflash
        name: Install espflash
        verify: espflash --version
        install: cargo install espflash

      - type: 'action-row'
        id: rust-install-cargo-generate
        name: Install cargo-generate
        verify: $out = cargo --list; if ($out -like '*generate    *') { exit 0 } else { exit 1 }
        install: cargo install cargo-generate

      - type: 'action-row'
        id: run-espup
        name: Run espup
        verify: if (Test-Path -Path '~/export-esp.ps1')  { exit 0 } else { exit 1 }
        install: espup install

      - type: 'action-row'
        id: install-toolchain
        name: Install Rust Toolchain
        verify: $out = rustup show; if ($out -like '*x86_64-pc-windows-gnu*') { exit 0 } else { exit 1 }
        install: rustup toolchain install nightly --component rust-src

      - type: 'action-row'
        id: install-target-c2-c3
        name: Add taget baremetal (ESP32-C2, ESP32-C3)
        verify: $out = rustup show; if ($out -like '*riscv32imc-unknown-none-elf*') { exit 0 } else { exit 1 }
        install: rustup target add riscv32imc-unknown-none-elf

      - type: 'action-row'
        id: install-target-c6-
        name: Add taget baremetal (ESP32-C2, ESP32-C3)
        verify: $out = rustup show; if ($out -like '*riscv32imac-unknown-none-elf*') { exit 0 } else { exit 1 }
        install: rustup target add riscv32imac-unknown-none-elf

      - type: 'action-row'
        id: rust-build-hello-world
        name: Build Hello World
        verify: if (Test-Path -Path '~/rust-hello-world')  { exit 0 } else { exit 1 }
        install: |
              cd ~
              cargo generate esp-rs/esp-template --name rust-hello-world --silent
              cd rust-hello-world
              cargo build

  - type: fieldset
    id: fieldset_rust
    platform: linux
    subitems:
      - type: 'action-row'
        id: install-rustup
        name: Install Prerequisites
        verify: curl --version
        install: |
            echo "xxxpassxxx" | sudo -S apt update
            echo "xxxpassxxx" | sudo -S apt install -y curl
      - type: 'action-row'
        id: install-rustup
        name: Install Rust Up
        verify: rustup --version
        install: |
            cd ~
            curl https://sh.rustup.rs -sSf | sh
            source ~/.cargo/env

      - type: 'action-row'
        id: install-espup
        name: Install espup (Xtensa targets only)
        verify: espup --version
        install: |
            source ~/.cargo/env
            cargo install espup

      - type: 'action-row'
        id: rust-install-espflash
        name: Install espflash
        verify: espflash --version
        install: |
            source ~/.cargo/env
            cargo install espflash

      - type: 'action-row'
        id: run-espup
        name: Run espup
        verify: if (Test-Path -Path '~/export-esp.ps1')  { exit 0 } else { exit 1 }
        install: espup install

      - type: 'action-row'
        id: install-toolchain
        name: Install Rust Toolchain
        verify: $out = rustup show; if ($out -like '*x86_64-pc-windows-gnu*') { exit 0 } else { exit 1 }
        install: rustup toolchain install nightly --component rust-src

      - type: 'action-row'
        id: install-target-c2-c3
        name: Add taget baremetal (ESP32-C2, ESP32-C3)
        verify: $out = rustup show; if ($out -like '*riscv32imc-unknown-none-elf*') { exit 0 } else { exit 1 }
        install: |
            source ~/.cargo/env
            rustup target add riscv32imc-unknown-none-elf

      - type: 'action-row'
        id: install-target-c6-
        name: Add taget baremetal (ESP32-C2, ESP32-C3)
        install: |
            source ~/.cargo/env
            rustup target add riscv32imac-unknown-none-elf

  #
  # Zephyr
  #
  - type: fieldset
    id: fieldset_zephyr
    platform: win32
    subitems:
      - type: 'action-row'
        id: zephyr-install-python
        name: Install Python
        verify: python --version
        install: winget install python
      - type: 'action-row'
        id: zephyr-install-venv
        name: Create Virtual Environment
        verify: if (Test-path ~/zephyrproject/.venv/Scripts/activate.bat -PathType leaf) { exit 0 } else { exit 1 }
        install: |
            cd ~
            python -m venv zephyrproject\.venv

      - type: 'action-row'
        id: zephyr-install-west
        name: Install west
        verify: ~/zephyrproject/.venv/Scripts/west --version
        install: |
            ~/zephyrproject/.venv/Scripts/pip install west

      - type: 'action-row'
        id: zephyr-get-source
        name: Get Zephyr Source
        verify: if (Test-path ~/zephyrproject/.venv/Scripts/mooo -PathType leaf) { exit 0 } else { exit 1 }
        install: |
            cd ~
            ~/zephyrproject/.venv/Scripts/west init zephyrproject
            cd zephyrproject
            ~/zephyrproject/.venv/Scripts/west update
            ~/zephyrproject/.venv/Scripts/west zephyr-export
            ~/zephyrproject/.venv/Scripts/pip install -r ./zephyr/scripts/requirements.txt
            ~/zephyrproject/.venv/Scripts/west blobs fetch hal_espressif
        # maybe last command should be separated
      - type: 'action-row'
        id: zephyr-download-sdk
        name: Download Zephyr SDK
        verify: if (Test-path ~/zephyr-sdk-0.16.3_windows-x86_64.7z -PathType leaf) { exit 0 } else { exit 1 }
        install: |
            if (-not (Test-path ~/zephyr-sdk-0.16.3_windows-x86_64.7z -PathType leaf)) { wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.3/zephyr-sdk-0.16.3_windows-x86_64.7z -O ~/zephyr-sdk-0.16.3_windows-x86_64.7z }
            7z x ~/zephyr-sdk-0.16.3_windows-x86_64.7z
            ~/zephyr-sdk-0.16.3/setup.cmd
        # !!! make setup.cmd non-interactive !!!
        # ESP-IDF targets are more complex
      - type: 'action-row'
        id: zephyr-build-hello-world
        name: Build Hello World Example
        verify: if (Test-path ~/zephyrproject/zephyr/build/zephyr/zephyr.elf -PathType leaf) { exit 0 } else { exit 1 }
        install: |
            cd ~
            ./zephyrproject/.venv/Scripts/activate.ps1
            cd ~/zephyrproject/zephyr
            west build -p auto -b esp32 samples/hello_world/
  - type: fieldset
    id: fieldset_zephyr
    platform: linux
    subitems:
      - type: 'action-row'
        id: zephyr-install-python
        name: Install Python
        verify: python3.9 --version
        install: |
            echo "xxxpassxxx" | sudo -S apt update
            echo "xxxpassxxx" | sudo -S apt install -y software-properties-common
            echo "xxxpassxxx" | sudo -S add-apt-repository ppa:deadsnakes/ppa -y
            echo "xxxpassxxx" | sudo -S apt install -y python3.9 python3.9-venv python3-pip cmake ninja-build

      - type: 'action-row'
        id: zephyr-install-venv
        name: Create Virtual Environment
        verify: test -f ~/zephyrproject/.venv/bin/activate
        install: |
            python3.9 -m venv ~/zephyrproject/.venv

      - type: 'action-row'
        id: zephyr-install-west
        name: Install west
        verify: source ~/zephyrproject/.venv/bin/activate; west --version
        install: |
            source ~/zephyrproject/.venv/bin/activate
            pip install west

      - type: 'action-row'
        id: zephyr-get-source
        name: Get Zephyr Source
        verify: test -f ~/zephyrproject/.venv/Scripts/mooo
        install: |
            cd ~
            source ~/zephyrproject/.venv/bin/activate
            west init ~/zephyrproject
            cd zephyrproject
            west update
            west zephyr-export
            pip install -r ./zephyr/scripts/requirements.txt
            west blobs fetch hal_espressif
        # maybe last command should be separated
      - type: 'action-row'
        id: zephyr-download-sdk
        name: Download Zephyr SDK
        verify: test -p ~/zephyr-sdk-0.16.8
        install: |
            cd ~
            if ! [ -e ~/zephyr-sdk-0.16.8_linux-x86_64.tar.xz ]; then
              wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.8/zephyr-sdk-0.16.8_linux-x86_64.tar.xz;
              wget -O - https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.8/sha256.sum | shasum --check --ignore-missing;
            fi
            tar xvf zephyr-sdk-0.16.8_linux-x86_64.tar.xz
            cd zephyr-sdk-0.16.8
            ./setup.sh -t all -h -c
        # !!! make setup.cmd non-interactive !!!
        # ESP-IDF targets are more complex
      - type: 'action-row'
        id: zephyr-build-hello-world
        name: Build Hello World Example
        verify: test -p ~/zephyrproject/zephyr/build/zephyr/zephyr.elf
        install: |
            cd ~
            source ~/zephyrproject/.venv/bin/activate
            cd ~/zephyrproject/zephyr
            west build -p auto -b esp32 samples/hello_world/
footer:
  - type: footer
    id: footer
    subitems:
      - type: button
        id: install_button
        text: Install
